pr:
  branches:
    include:
      - dev
      - v*.x

trigger:
  branches:
    include:
      - dev
      - v*.x
  tags:
    include:
      - v*.*.*

variables:
  isTagTriggered: $[startsWith(variables['Build.SourceBranch'], 'refs/tags/')]
  prefix: $[format('0.{0:yyyy}.{0:MMdd}', pipeline.startTime)]
  version: $[format('{0}.{1}', variables.prefix, counter(variables.prefix, 1))] # e.g. 0.2001.0203.4

pool:
  name: 1ES-Hosted-AzFunc
  demands:
    - ImageOverride -equals MMS2019TLS

jobs:
  - job: buildExtension
    displayName: Build WebJobs extension
    steps:
      - script: |
          SET tag=$(Build.SourceBranchName)
          ECHO ##vso[task.setvariable variable=version]%tag:~1%
        displayName: Extract version # e.g. 1.2.3
        condition: and(succeeded(), eq(variables.isTagTriggered, 'True'))

      - task: UseDotNet@2
        displayName: Acquire .NET SDK
        inputs:
          packageType: sdk
          version: 6.x
          performMultiLevelLookup: true

      - task: DotNetCoreCLI@2
        displayName: Build solution
        inputs:
          command: build
          arguments: --configuration Release -property:Version=$(version) -property:CommitHash=$(Build.SourceVersion)

      - task: DotNetCoreCLI@2
        displayName: Test extension
        inputs:
          command: test
          projects: test/WebJobs.Extensions.RabbitMQ.Tests/WebJobs.Extensions.RabbitMQ.Tests.csproj
          arguments: --configuration Debug

      - task: DotNetCoreCLI@2
        displayName: Pack extension
        condition: and(succeeded(), eq(variables.isTagTriggered, 'True'))
        inputs:
          command: pack
          searchPatternPack: src/WebJobs.Extensions.RabbitMQ.csproj
          configurationToPack: Release
          buildProperties: Version=$(version);CommitHash=$(Build.SourceVersion)
          outputDir: $(Build.ArtifactStagingDirectory)
          nobuild: true
          verbosityPack: minimal

      - task: ManifestGeneratorTask@0
        displayName: Generate SBOM manifest
        condition: and(succeeded(), eq(variables.isTagTriggered, 'True'))
        inputs:
          buildDropPath: $(System.ArtifactsDirectory)
          packageName: Azure Functions RabbitMQ Extension
          packageVersion: $(version)

      - publish: $(Build.ArtifactStagingDirectory)
        displayName: Publish extension package
        condition: and(succeeded(), eq(variables.isTagTriggered, 'True'))
        artifact: azure-functions-rabbitmq-extension/net/$(version)

  - job: buildJavaBindings
    displayName: Build Java library
    steps:
      - script: |
          SET tag=$(Build.SourceBranchName)
          ECHO ##vso[task.setvariable variable=version]%tag:~1%
        displayName: Extract version # e.g. 1.2.3
        condition: and(succeeded(), eq(variables.isTagTriggered, 'True'))

      - task: Maven@3
        displayName: Set library version
        inputs:
          mavenPomFile: binding-library/java/pom.xml
          goals: versions:set
          options: --define=newVersion=$(version)

      - task: Maven@3
        displayName: Build library
        inputs:
          mavenPomFile: binding-library/java/pom.xml
          options: --batch-mode --define=gpg.skip --define=org.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn --update-snapshots

      - script: |
          SET PREFIX=azure-functions-java-library-rabbitmq-$(version)
          CD binding-library\java
          COPY pom.xml "$(Build.ArtifactStagingDirectory)\%PREFIX%.pom"
          COPY "target\%PREFIX%.jar" "$(Build.ArtifactStagingDirectory)\%PREFIX%.jar"
          COPY "target\%PREFIX%-javadoc.jar" "$(Build.ArtifactStagingDirectory)\%PREFIX%-javadoc.jar"
          COPY "target\%PREFIX%-sources.jar" "$(Build.ArtifactStagingDirectory)\%PREFIX%-sources.jar"
        displayName: Copy output files
        condition: and(succeeded(), eq(variables.isTagTriggered, 'True'))

      - task: ManifestGeneratorTask@0
        displayName: Generate SBOM manifest
        condition: and(succeeded(), eq(variables.isTagTriggered, 'True'))
        inputs:
          buildDropPath: $(System.ArtifactsDirectory)
          packageName: Azure Functions RabbitMQ Java Bindings
          packageVersion: $(version)

      - publish: $(Build.ArtifactStagingDirectory)
        displayName: Publish library package
        condition: and(succeeded(), eq(variables.isTagTriggered, 'True'))
        artifact: azure-functions-rabbitmq-extension/java/$(version)
